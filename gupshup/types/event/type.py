from typing import Any, Optional
import json

from ..primitive import JSON
from ..util import Serializable, SerializableEnum


class EventType(Serializable):
    """ """

    _by_event_type = {}

    class Class(SerializableEnum):
        """The context that an event type is used in."""

        UNKNOWN = "unknown"

        SAND_BOX = "sandbox-start"
        """
        This event is received when the app is in Sandbox mode and you have set a callback URL
        or
        This event is received when the app is in Sandbox mode and you have used Gupshup proxy bot to invoke your App using command `Proxy {{App_Name}}`.
        """

        OPTED_IN = "opted-in"
        """
        This event is received when an end user opt-in to receive notification from a business
        """

        OPTED_OUT = "opted-out"
        """
        This event is received when an end user opt-out from receiving notification from a business
        """

        # system-events: These are generated by our platform when some event occurs. You can choose to receive these events on your callback URL from the settings in app dashbaord.
        TEMPLATE_EVENT = "template-event"
        """
        A system event of type `template` is received when the status of template is updated. For example, a submitted template has been approved or rejected
        """

        # account-events: Account events are received when an event occurs in a specific WABA. For example, when a WhatsApp business policy is voilated by a WABA, or if the messaging tier limit of a WABA is updated.
        REVIEW_EVENT = "review-event"
        """
        This event is received when the submitted WABA is approved or rejected. Possible values: `APPROVED`, `REJECTED`
        """

        STATUS_EVENT = "status-event"
        """
        This event is received when the status of the WABA has changed. Possible values: `ACCOUNT_VIOLATION`: The WABA has been disabled/banned due to policy violation, additionally, the reason for the violation is also received. `ACCOUNT_VERIFIED`: When an app of type of Embed is updated from Sandbox to Live.
        """

        PNDN_EVENT = "pndn-event"
        """
        This event is received when the status of the submitted Phone number/Display Name is updated. Possible values: `INVALID_FORMAT`, `NAME_END_CLIENT_VIOLATION`, `NAME_FORMAT_UNACCEPTABLE`, `NAME_NOT_CONSISTENT`, `NAME_INDIVIDUAL_ISSUE`, and `NAME_ENDCLIENT_NOTRELATED`
        """

        TIER_EVENT = "tier-event"
        """
        This events notifies you when the quality-related status of a phone number has an update. Possible values for events: `ONBOARDING`, `UPGRADE`, `DOWNGRADE`, `UNFLAGGED`, and `FLAGGED`. The current tier limit where this account is and the new tier if it has been updated. Possible values are: `TIER_1K`, `TIER_10K`, and `TIER_100K`.
        """

        MESSAGE = "message"
        """
        These events states the status of the message sent using the send message API to WhatsApp API client(which essentially send out message to the customer).
        """

    __slots__ = ("t", "t_class")

    t: str
    """The type string of the event."""
    t_class: Class
    """The context where the event appeared."""

    def __init__(self, t: str, t_class: Class) -> None:
        object.__setattr__(self, "t", t)
        object.__setattr__(self, "t_class", t_class)
        if t not in self._by_event_type:
            self._by_event_type[t] = self

    def serialize(self) -> JSON:
        return self.t

    @classmethod
    def deserialize(cls, raw: JSON) -> Any:
        return cls.find(raw)

    @classmethod
    def find(cls, t: str, t_class: Optional[Class] = None) -> "EventType":
        """ """
        try:
            return cls._by_event_type[t].with_class(t_class)
        except KeyError:
            return EventType(t, t_class=t_class or cls.Class.UNKNOWN)

    def json(self) -> str:
        return json.dumps(self.serialize())

    @classmethod
    def parse_json(cls, data: str) -> "EventType":
        return cls.deserialize(json.loads(data))

    def __setattr__(self, *args, **kwargs) -> None:
        raise TypeError("EventTypes are frozen")

    def __delattr__(self, *args, **kwargs) -> None:
        raise TypeError("EventTypes are frozen")

    def __str__(self):
        return self.t

    def __repr__(self):
        return f'EventType("{self.t}", EventType.Class.{self.t_class.name})'

    def __hash__(self):
        return hash(self.t) ^ hash(self.t_class)

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, EventType):
            return False
        return self.t == other.t and self.t_class == other.t_class

    def with_class(self, t_class: Optional[Class]) -> "EventType":
        """ """
        if t_class is None or self.t_class == t_class:
            return self
        return EventType(t=self.t, t_class=t_class)

    @property
    def is_sandbox_start(self) -> bool:
        """A shortcut for ``type.t_class == EventType.Class.SAND_BOX``"""
        return self.t_class == EventType.Class.SAND_BOX

    @property
    def is_opted_in(self) -> bool:
        """A shortcut for ``type.t_class == EventType.Class.OPTED_IN``"""
        return self.t_class == EventType.Class.OPTED_IN

    @property
    def is_opted_out(self) -> bool:
        """A shortcut for ``type.t_class == EventType.Class.OPTED_OUT``"""
        return self.t_class == EventType.Class.OPTED_OUT

    @property
    def is_template_event(self) -> bool:
        """A shortcut for ``type.t_class == EventType.Class.TEMPLATE_EVENT``"""
        return self.t_class == EventType.Class.TEMPLATE_EVENT

    @property
    def is_review_event(self) -> bool:
        """A shortcut for ``type.t_class == EventType.Class.REVIEW_EVENT``"""
        return self.t_class == EventType.Class.REVIEW_EVENT

    @property
    def is_status_event(self) -> bool:
        """A shortcut for ``type.t_class == EventType.Class.STATUS_EVENT``"""
        return self.t_class == EventType.Class.STATUS_EVENT

    @property
    def is_pndn_event(self) -> bool:
        """A shortcut for ``type.t_class == EventType.Class.PNDN_EVENT``"""
        return self.t_class == EventType.Class.PNDN_EVENT

    @property
    def is_pndn_event(self) -> bool:
        """A shortcut for ``type.t_class == EventType.Class.PNDN_EVENT``"""
        return self.t_class == EventType.Class.PNDN_EVENT

    @property
    def is_message(self) -> bool:
        """A shortcut for ``type.t_class == EventType.Class.MESSAGE``"""
        return self.t_class == EventType.Class.MESSAGE
